{% block dropzone_widget %}
    {{ block('form_widget') }}
    <style>

        .collection .collection-item {
            background-color: #fff;
            line-height: 1.5rem;
            padding: 10px 20px;
            margin: 0;
            border-bottom: 1px solid #e0e0e0;
        }

        .collection .collection-item:last-child {
            border-bottom: none;
        }

        .valign-wrapper {
            display: -webkit-flex;
            display: -ms-flexbox;
            display: flex;
            -webkit-align-items: center;
            -ms-flex-align: center;
            align-items: center;
        }

        .progress {
            position: relative;
            height: 4px;
            display: block;
            width: 100%;
            background-color: #acece6;
            border-radius: 2px;
            margin: .5rem 0 1rem 0;
            overflow: hidden;
        }

        .progress .determinate {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            background-color: #26a69a;
            transition: width .3s linear;
        }

        .fileuploader {
            position: relative;
            width: 60%;
            margin: auto;
            height: 400px;
            border: 4px dashed #ddd;
            background: #f6f6f6;
            margin-top: 85px;
        }
        .fileuploader #upload-label{
            background: rgba(231, 97, 92, 0);
            color: #fff;
            position: absolute;
            height: 115px;
            top: 20%;
            left: 0;
            right: 0;
            margin-right: auto;
            margin-left: auto;
            min-width: 20%;
            text-align: center;
            cursor: pointer;
        }
        .fileuploader.active{
            background: #fff;
        }
        .fileuploader.active #upload-label{
            background: #fff;
            color: #e7615c;
        }

        .fileuploader #upload-label i:hover {
            color: #444;
            font-size: 9.4rem;
            -webkit-transition: width 2s;
        }

        .fileuploader #upload-label span.title{
            font-size: 1em;
            font-weight: bold;
            display: block;
        }

        .fileuploader #upload-label i{
            text-align: center;
            display: block;
            color: #e7615c;
            height: 115px;
            font-size: 9.5rem;
            position: absolute;
            top: -12px;
            left: 0;
            right: 0;
            margin-right: auto;
            margin-left: auto;
        }
        /** Preview of collections of uploaded documents **/
        .preview-container{
        /*    position: relative;*/
        /*    bottom: 0px;*/
        /*    width: 35%;*/
        /*    margin: auto;*/
        /*    top: 25px;*/
            visibility: hidden;
        }
        .preview-container #previews{
            max-height: 400px;
            overflow: auto;
        }
        .preview-container #previews .zdrop-info{
            width: 88%;
            margin-right: 2%;
        }
        .preview-container #previews.collection{
            margin: 0;
            box-shadow: none;
        }

        .preview-container #previews.collection .collection-item {
            /*background-color: #e0e0e0;*/
        }

        .preview-container #previews.collection .actions a{
            width: 1.5em;
            height: 1.5em;
            line-height: 1;
        }
        .preview-container #previews.collection .actions a i{
            font-size: 1em;
            line-height: 1.6;
        }
        .preview-container #previews.collection .dz-error-message{
            font-size: 0.8em;
            margin-top: -12px;
            color: #F44336;
        }

        /*media queries*/

        @media only screen and (max-width: 601px) {
            .fileuploader {
                width: 100%;
            }

            .preview-container {
                width: 100%;
            }
        }
    </style>
    {% if previewsContainer %}
    <div class="preview-container">
        <div class="collection card" id="previews">
            <div class="collection-item clearhack valign-wrapper item-template" id="zdrop-template">
                <div class="left pv zdrop-info" data-dz-thumbnail>
                    <div>
                        <span data-dz-name></span> <span data-dz-size></span>
                    </div>
                    <div class="progress">  <div class="determinate" style="width:0" data-dz-uploadprogress></div> </div>
                    <div class="dz-error-message"><span data-dz-errormessage></span></div>
                </div>
            </div>
        </div>
    </div>
    {% endif %}
    <script>
        (function () {

            {% if previewsContainer %}
                previewsContainer = '{{ previewsContainer }}';

                var previewNode = document.getElementById("zdrop-template");
                previewNode.id = "";
                var previewTemplate = previewNode.parentNode.innerHTML;
                previewNode.parentNode.removeChild(previewNode);
            {% endif %}

            let dropzoneId = '{{ id|default(0) }}_dropzone';
            let form_widget = document.getElementById(dropzoneId);
            let dropzoneElement = form_widget.parentElement;
            dropzoneElement.classList.add('dropzone');

            function initPrototype(id) {
                {% if multiple %}
                element = document.createElement('input');
                element.type = 'hidden';
                element.name = '{{ full_name }}[dropzone][]';
                element.value = id;
                dropzoneElement.append(element);
                {% else %}
                element = document.createElement('option');
                element.value = id;
                element.text = id;
                element.selected = true;
                form_widget.append(element);
                {% endif %}
            }

            options = {};
            {% if dictRemoveFileConfirmation %}
            options.dictRemoveFileConfirmation = '{{ dictRemoveFileConfirmation }}';
            {% endif %}
            {% if disablePreviews %}
            options.disablePreviews = {{ disablePreviews }};
            {% endif %}
            {% if maxFilesize %}
            options.maxFilesize = {{ maxFilesize }};
            {% endif %}
            {% if maxFiles %}
            options.maxFiles = {{ maxFiles }};
            {% endif %}
            {% if uploadHandlerMethod %}
            options.method = '{{ uploadHandlerMethod }}';
            {% endif %}
            {% if withCredentials %}
            options.withCredentials = {{ withCredentials }};
            {% endif %}
            {% if thumbnailWidth %}
            options.thumbnailWidth = {{ thumbnailWidth }};
            {% endif %}
            {% if thumbnailHeight %}
            options.thumbnailHeight = {{ thumbnailHeight }};
            {% endif %}
            {% if thumbnailMethod %}
            options.thumbnailMethod = '{{ thumbnailMethod }}';
            {% endif %}
            {% if resizeWidth %}
            options.resizeWidth = {{ resizeWidth }};
            {% endif %}
            {% if resizeHeight %}
            options.resizeHeight = {{ resizeHeight }};
            {% endif %}
            {% if resizeMimeType %}
            options.resizeMimeType = {{ resizeMimeType }};
            {% endif %}
            {% if resizeMethod %}
            options.resizeMethod = '{{ resizeMethod }}';
            {% endif %}
            {% if filesizeBase %}
            options.filesizeBase = {{ filesizeBase }};
            {% endif %}
            {% if headers is iterable %}
            header_object = {};
            {% for key,value in headers %}
            var key = '{{ key }}';
            header_object[key] = '{{ value }}';
            {% endfor %}
            options.headers = header_object;
            {% endif %}
            {% if ignoreHiddenFiles %}
            options.ignoreHiddenFiles = {{ ignoreHiddenFiles }};
            {% endif %}
            {% if acceptedFiles %}
            options.acceptedFiles = '{{ acceptedFiles }}';
            {% endif %}
            {% if autoProcessQueue %}
            options.autoProcessQueue = {{ autoProcessQueue }};
            {% endif %}
            {% if autoQueue %}
            options.autoQueue = {{ autoQueue }};
            {% endif %}
            {% if addRemoveLinks %}
            options.addRemoveLinks = {{ addRemoveLinks }};
            {% endif %}
            {% if previewsContainer %}
            options.previewsContainer = '{{ previewsContainer }}';
            {% endif %}
            {% if dictDefaultMessage %}
            options.dictDefaultMessage = '{{ dictDefaultMessage }}';
            {% endif %}
            {% if dictRemoveFile %}
            options.dictRemoveFile = '{{ dictRemoveFile }}';
            {% endif %}
            {% if dictFallbackMessage %}
            options.dictFallbackMessage = '{{ dictFallbackMessage }}';
            {% endif %}
            {% if dictFallbackText %}
            options.dictFallbackText = '{{ dictFallbackText }}';
            {% endif %}
            {% if dictFileTooBig %}
            options.dictFileTooBig = '{{ dictFileTooBig }}';
            {% endif %}
            {% if dictInvalidFileType %}
            options.dictInvalidFileType = '{{ dictInvalidFileType }}';
            {% endif %}
            {% if dictResponseError %}
            options.dictResponseError = '{{ dictResponseError }}';
            {% endif %}
            {% if dictCancelUpload %}
            options.dictCancelUpload = '{{ dictCancelUpload }}';
            {% endif %}
            {% if dictMaxFilesExceeded %}
            options.dictMaxFilesExceeded = '{{ dictMaxFilesExceeded }}';
            {% endif %}

            let myDropzone = new Dropzone(dropzoneElement, {
                url: '{{ path(uploadHandler) }}',
                ...options,

                {% if previewsContainer %}
                    previewTemplate: previewTemplate,
                    previewsContainer: document.getElementById('previews'),
                {% endif %}

                init: function () {
                    var myDropzone = this;

                    {% if files|length > 0 %}
                        $('.preview-container').css('visibility', 'visible');
                    {% endif %}

                    {% for file in files %}
                        src = '{{ attribute(file, choice_src) }}';
                        var mockFile = {
                            id: {{ file.id }},
                            name: '{{ file.name }}',
                            status: Dropzone.ADDED,
                            url: src,
                        };
                        {% if file.size is defined %}
                            mockFile.size = '{{ file.size }}';
                        {% endif %}
                        {% if  file.mimetype is defined %}
                            mockFile.type = '{{ file.mimetype }}';
                        {% endif %}
                        myDropzone.emit("addedfile", mockFile);
                        // myDropzone.emit("thumbnail", mockFile, src);
                        myDropzone.emit("complete", mockFile);
                        myDropzone.files.push(mockFile);
                        initPrototype('{{ file.id }}');
                        $(mockFile.previewElement).attr('data-id', {{ file.id }});

                        {% if downloadHandler %}
                           $('div[data-id="{{ file.id }}"]').append('<a href="{{ path(downloadHandler, {id: file.id}) }}" target="_self" style="text-align:center"><div><span class="bi bi-download" style="font-size: 1.5em"></span></div></a>');
                        {% endif %}

                        {% if removeHandler %}
                            $(".dz-remove").html("<span class='bi bi-trash text-danger' style='font-size: 1.5em'></span>");
                        {% else %}
                            $(".dz-remove").remove();
                        {% endif %}
                    {% endfor %}
                    this.on('success', function (file, result) {
                        {% if downloadHandler %}
                            if (result.id) {
                                file.id = result.id;
                                var url = '{{ path("downloadHandler", {'id': 'file_id'}) }}';
                                url = url.replace("file_id", file.id)
                                initPrototype(result.id);
                                var a = document.createElement('a');
                                a.setAttribute('href', url);
                                a.setAttribute('target', "_self");
                                a.setAttribute('style', 'text-align:center');
                                var div = document.createElement('div');
                                var span = document.createElement('span');
                                span.setAttribute('class', 'bi bi-download');
                                span.setAttribute('style', 'font-size: 1.5em');
                                a.appendChild(div);
                                div.appendChild(span);
                                file.previewTemplate.appendChild(a);
                            }
                        {% endif %}
                    });

                    this.on("addedfile", function(file) {
                        $('.preview-container').css('visibility', 'visible');
                    });

                    this.on("totaluploadprogress", function (progress) {
                        var progr = document.getElementsByClassName(".progress .determinate");
                        if (progr === undefined || progr === null)
                            return;

                        progr.style.width = progress + "%";
                    });

                    this.on("complete", function(file) {
                        {% if removeHandler %}
                            $(".dz-remove").html("<div><span class='bi bi-trash text-danger' style='font-size: 1.5em'></span></div>");
                        {% else %}
                            $(".dz-remove").remove();
                        {% endif %}
                    });

                    this.on('error', function(file, response) {
                        $(file.previewElement).find('.dz-error-message').text(response);
                    });
               },

                sending: function (file, xhr, formData) {
                    {% if headers is iterable %}
                        {% for key,value in formData %}
                            formData.append('{{ key }}', '{{ value }}');
                        {% endfor %}
                    {% endif %}
                },
                {#accept: function(file, done) {#}
                {#    var thumbnail = $(file.previewElement).find('.dz-image:last');#}

                {#    switch (file.type) {#}
                {#        case 'application/pdf':#}
                {#            this.emit("thumbnail", file, "{{ asset('assets/dropzone/img/pdf.png') }}");#}
                {#            // $(file.previewElement).find(".dz-image img").replaceWith('<i class="bi bi-file-pdf"></i>');#}
                {#            break;#}
                {#        case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':#}
                {#            this.emit("thumbnail", file, "/static/img/word.png");#}
                {#            break;#}
                {#        default:#}
                {#            this.emit("thumbnail", file, "{{ asset('assets/dropzone/img/default.png') }}");#}
                {#    }#}
                {#    file.previewTemplate.querySelector(".dz-image img").style.width="120px";#}
                {#    done();#}
                {#},#}

                removedfile: function (file) {
                    {% if removeHandler %}
                    if (file.id) {
                        const uri = '{{ path(removeHandler,{'id': 'file_id' }) }}';
                        const options_remove = {};
                        {% if removeHandlerMethod %}
                            options_remove.method = '{{ removeHandlerMethod }}';
                        {% endif %}
                        if (options.headers) {
                            options_remove.headers = options.headers;
                        }
                        fetch(uri.replace("file_id", file.id), options_remove)

                        {% if not multiple %}
                            for (var i=0; i<form_widget.length; i++) {
                                if (form_widget.options[i].value == file.id){
                                    form_widget.remove(i);
                                }
                            }
                            {% if required == false %}
                                form_widget.value = '';
                            {% endif %}
                        {% endif %}
                    }
                    file.previewElement.remove();
                    {% endif %}
                }
            });
        })();
    </script>
{% endblock %}